class Solution {
//find middle element
          public: 
           ListNode* getmid(ListNode* head){
             ListNode* slow = head;
            ListNode* fast = head;

             while(fast->next != NULL && fast->next->next != NULL){
           fast = fast->next->next;
           slow = slow->next;
       }
       return slow;
   } 


        //reverse the right half LL
     public: 
          ListNode* reverse(ListNode* head){
               ListNode* cur = head;
                ListNode* prev = NULL;
                 ListNode* next = NULL;

            while(cur != NULL){
             next = cur ->next;
             cur->next = prev;
               prev = cur;
              cur = next;
        }
        return prev;
      }


      //check the palindrom condition
           public:
           bool isPalindrome(ListNode* head) {
                if(head->next == NULL){
                  return true;
               }

             ListNode* mid = getmid(head);
              ListNode* temp = reverse(temp);

              ListNode* head1 = head;
              ListNode* head2 = mid->next;

             while(head2 != NULL){
            if(head1 -> val != head2 -> val){
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;

            temp = mid->next;
            mid->next = reverse(temp);
            return true;
          }
    }      
};
